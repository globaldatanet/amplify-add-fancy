"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../../constants");
const functionSecretsStateManager_1 = require("../../provider-utils/awscloudformation/secrets/functionSecretsStateManager");
const funcionStateUtils_1 = require("../../provider-utils/awscloudformation/utils/funcionStateUtils");
const storeResources_1 = require("../../provider-utils/awscloudformation/utils/storeResources");
const removeFunctionWalkthrough_1 = require("../../provider-utils/awscloudformation/service-walkthroughs/removeFunctionWalkthrough");
const removeLayerWalkthrough_1 = require("../../provider-utils/awscloudformation/service-walkthroughs/removeLayerWalkthrough");
const subcommand = 'remove';
module.exports = {
    name: subcommand,
    run: async (context) => {
        const { amplify, parameters } = context;
        let resourceName = parameters.first;
        let resourceToBeDeleted = '';
        const response = await removeFunctionWalkthrough_1.removeResource(resourceName);
        if (response.isLambdaLayer) {
            context.print.info('When you delete a layer version, you can no longer configure functions to use it.\nHowever, any function that already uses the layer version continues to have access to it.');
            resourceToBeDeleted = await removeLayerWalkthrough_1.removeWalkthrough(context, response.resourceName);
            if (!resourceToBeDeleted) {
                return;
            }
            resourceName = resourceToBeDeleted;
        }
        else {
            resourceName = response.resourceName;
        }
        let hasSecrets = false;
        const resourceNameCallback = async (resourceName) => {
            hasSecrets = functionSecretsStateManager_1.getLocalFunctionSecretNames(resourceName).length > 0;
        };
        return amplify
            .removeResource(context, constants_1.categoryName, resourceName, undefined, resourceNameCallback)
            .then(async (resource) => {
            if ((resource === null || resource === void 0 ? void 0 : resource.service) === "LambdaLayer") {
                storeResources_1.removeLayerArtifacts(context, resource.resourceName);
            }
            if (!funcionStateUtils_1.isFunctionPushed(resourceName) && hasSecrets) {
                await (await functionSecretsStateManager_1.FunctionSecretsStateManager.getInstance(context)).deleteAllFunctionSecrets(resourceName);
            }
        })
            .catch(err => {
            if (err.stack) {
                context.print.info(err.stack);
                context.print.error('An error occurred when removing the function resource');
            }
            context.usageData.emitError(err);
            process.exitCode = 1;
        });
    },
};
//# sourceMappingURL=remove.js.map