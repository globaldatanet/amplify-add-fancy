"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateCFNFileForResourcePermissions = exports.migrate = exports.updateWalkthrough = exports.buildTopLevelComment = exports.buildShowEnvVars = exports.createWalkthrough = void 0;
const amplify_cli_core_1 = require("amplify-cli-core");
const inquirer_1 = __importDefault(require("inquirer"));
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const constants_1 = require("../../../constants");
const cloudformationHelpers_1 = require("../utils/cloudformationHelpers");
const constants_2 = require("../utils/constants");
const funcParamsUtils_1 = require("../utils/funcParamsUtils");
const functionPluginLoader_1 = require("../utils/functionPluginLoader");
const layerArnConverter_1 = require("../utils/layerArnConverter");
const loadFunctionParameters_1 = require("../utils/loadFunctionParameters");
const environmentVariablesHelper_1 = require("../utils/environmentVariablesHelper");
const environmentVariableWalkthrough_1 = require("./environmentVariableWalkthrough");
const permissionMapUtils_1 = require("../utils/permissionMapUtils");
const consolidateDependsOn_1 = require("../utils/consolidateDependsOn");
const secretValuesWalkthrough_1 = require("./secretValuesWalkthrough");
const secretDeltaUtilities_1 = require("../secrets/secretDeltaUtilities");
const functionSecretsStateManager_1 = require("../secrets/functionSecretsStateManager");
const updateTopLevelComment_1 = require("../utils/updateTopLevelComment");
const addLayerToFunctionWalkthrough_1 = require("./addLayerToFunctionWalkthrough");
const autogeneratedParameters_1 = __importDefault(require("./autogeneratedParameters"));
const execPermissionsWalkthrough_1 = require("./execPermissionsWalkthrough");
const generalQuestionsWalkthrough_1 = require("./generalQuestionsWalkthrough");
const scheduleWalkthrough_1 = require("./scheduleWalkthrough");
async function createWalkthrough(context, templateParameters) {
    templateParameters = funcParamsUtils_1.merge(templateParameters, autogeneratedParameters_1.default(context));
    templateParameters = funcParamsUtils_1.merge(templateParameters, await generalQuestionsWalkthrough_1.generalQuestionsWalkthrough(context));
    if (templateParameters.functionName) {
        templateParameters.resourceName = templateParameters.functionName;
    }
    if (!templateParameters.runtime) {
        let runtimeSelection = await functionPluginLoader_1.runtimeWalkthrough(context, templateParameters);
        templateParameters = funcParamsUtils_1.merge(templateParameters, runtimeSelection[0]);
    }
    templateParameters = funcParamsUtils_1.merge(templateParameters, await functionPluginLoader_1.templateWalkthrough(context, templateParameters));
    context.print.info('');
    context.print.success('Available advanced settings:');
    constants_2.advancedSettingsList.forEach(setting => context.print.info('- '.concat(setting)));
    context.print.info('');
    if (await context.amplify.confirmPrompt('Do you want to configure advanced settings?', false)) {
        if (await context.amplify.confirmPrompt('Do you want to access other resources in this project from your Lambda function?')) {
            templateParameters = funcParamsUtils_1.merge(templateParameters, await execPermissionsWalkthrough_1.askExecRolePermissionsQuestions(context, templateParameters.functionName, undefined, templateParameters.environmentMap));
        }
        templateParameters = funcParamsUtils_1.merge(templateParameters, await scheduleWalkthrough_1.scheduleWalkthrough(context, templateParameters));
        templateParameters = funcParamsUtils_1.merge(templateParameters, await addLayerToFunctionWalkthrough_1.addLayersToFunctionWalkthrough(context, templateParameters.runtime));
        if (await context.amplify.confirmPrompt('Do you want to configure environment variables for this function?', false)) {
            templateParameters = funcParamsUtils_1.merge(templateParameters, await environmentVariableWalkthrough_1.askEnvironmentVariableQuestions(templateParameters.functionName));
            templateParameters.topLevelComment = buildTopLevelComment(templateParameters.environmentMap);
            const envVarViewString = buildShowEnvVars(templateParameters.environmentMap);
            context.print.info(envVarViewString);
        }
        templateParameters = funcParamsUtils_1.merge(templateParameters, await secretValuesWalkthrough_1.secretValuesWalkthrough(secretDeltaUtilities_1.secretNamesToSecretDeltas(functionSecretsStateManager_1.getLocalFunctionSecretNames(templateParameters.functionName)), Object.keys(environmentVariablesHelper_1.getStoredEnvironmentVariables(templateParameters.functionName))));
    }
    return templateParameters;
}
exports.createWalkthrough = createWalkthrough;
function buildShowEnvVars(envVariableMap) {
    const envVarViewArr = Object.keys(envVariableMap);
    const envVarViewString = envVarViewArr.join("\n\t");
    const showEnvComment = `${constants_1.envVarPrintoutPrefix}${envVarViewString}`;
    return showEnvComment;
}
exports.buildShowEnvVars = buildShowEnvVars;
function buildTopLevelComment(envVariableMap) {
    const envVarViewArr = Object.keys(envVariableMap);
    const envVarViewString = envVarViewArr.join("\n\t");
    const topLevelComment = `${constants_1.topLevelCommentPrefix}${envVarViewString}${constants_1.topLevelCommentSuffix}`;
    return topLevelComment;
}
exports.buildTopLevelComment = buildTopLevelComment;
function provideInformation(context, lambdaToUpdate, functionRuntime, currentParameters, scheduleParameters) {
    context.print.success('General information');
    context.print.info('- Name: '.concat(lambdaToUpdate));
    context.print.info('- Runtime: '.concat(functionRuntime));
    context.print.info('');
    context.print.success('Resource access permission');
    const currentCategoryPermissions = permissionMapUtils_1.fetchPermissionCategories(currentParameters.permissions);
    if (currentCategoryPermissions.length) {
        currentCategoryPermissions.forEach(category => {
            const currentResources = permissionMapUtils_1.fetchPermissionResourcesForCategory(currentParameters.permissions, category);
            currentResources.forEach(resource => {
                const currentPermissions = permissionMapUtils_1.fetchPermissionsForResourceInCategory(currentParameters.permissions, category, resource);
                const formattedCurrentPermissions = ' ('.concat(currentPermissions.join(', ').concat(')'));
                context.print.info('- '.concat(resource).concat(formattedCurrentPermissions));
            });
        });
    }
    else {
        context.print.info('- Not configured');
    }
    context.print.info('');
    context.print.success('Scheduled recurring invocation');
    if (scheduleParameters.cloudwatchRule && scheduleParameters.cloudwatchRule !== 'NONE') {
        context.print.info('- '.concat(scheduleParameters.cloudwatchRule));
        context.print.info('');
    }
    else {
        context.print.info('- Not configured');
        context.print.info('');
    }
    context.print.success('Lambda layers');
    if (currentParameters.lambdaLayers && currentParameters.lambdaLayers.length) {
        currentParameters.lambdaLayers.forEach(layer => {
            if (layer.arn) {
                context.print.info('- '.concat(layer.arn));
            }
            else {
                context.print.info(`- ${layer.resourceName}`);
            }
        });
        context.print.info('');
    }
    else {
        context.print.info('- Not configured');
        context.print.info('');
    }
    context.print.success('Environment variables:');
    const storedEnvironmentVariables = environmentVariablesHelper_1.getStoredEnvironmentVariables(lambdaToUpdate);
    if (lodash_1.default.size(storedEnvironmentVariables) !== 0) {
        lodash_1.default.forEach(storedEnvironmentVariables, (environmentVariableValue, environmentVariableKey) => {
            context.print.info(`- ${environmentVariableKey}: ${environmentVariableValue}`);
        });
    }
    else {
        context.print.info('- Not configured');
    }
    context.print.info('');
    context.print.success('Secrets configuration');
    const currentSecrets = functionSecretsStateManager_1.getLocalFunctionSecretNames(lambdaToUpdate);
    if (currentSecrets.length) {
        currentSecrets.forEach(secretName => context.print.info(`- ${secretName}`));
    }
    else {
        context.print.info('- Not configured');
    }
    context.print.info('');
}
async function updateWalkthrough(context, lambdaToUpdate) {
    const lambdaFuncResourceNames = (await context.amplify.getResourceStatus()).allResources
        .filter(resource => resource.service === "Lambda" && resource.mobileHubMigrated !== true)
        .map(resource => resource.resourceName);
    if (lambdaFuncResourceNames.length === 0) {
        context.print.error('No Lambda function resource to update. Use "amplify add function" to create a new function.');
        return;
    }
    if (lambdaToUpdate) {
        if (!lambdaFuncResourceNames.includes(lambdaToUpdate)) {
            context.print.error(`No Lambda function named ${lambdaToUpdate} exists in the project.`);
            return;
        }
    }
    else {
        const resourceQuestion = [
            {
                name: 'resourceName',
                message: 'Select the Lambda function you want to update',
                type: 'list',
                choices: lambdaFuncResourceNames,
            },
        ];
        lambdaToUpdate = (await inquirer_1.default.prompt(resourceQuestion)).resourceName;
    }
    const functionParameters = {
        resourceName: lambdaToUpdate,
        environmentMap: {
            ENV: {
                Ref: 'env',
            },
            REGION: {
                Ref: 'AWS::Region',
            },
        },
    };
    const projectBackendDirPath = amplify_cli_core_1.pathManager.getBackendDirPath();
    const resourceDirPath = path_1.default.join(projectBackendDirPath, constants_1.categoryName, functionParameters.resourceName);
    const currentParameters = loadFunctionParameters_1.loadFunctionParameters(resourceDirPath);
    const functionRuntime = context.amplify.readBreadcrumbs(constants_1.categoryName, functionParameters.resourceName).functionRuntime;
    const cfnParameters = amplify_cli_core_1.JSONUtilities.readJson(path_1.default.join(resourceDirPath, constants_2.parametersFileName), { throwIfNotExist: false }) || {};
    const scheduleParameters = {
        cloudwatchRule: cfnParameters.CloudWatchRule,
        resourceName: functionParameters.resourceName,
    };
    provideInformation(context, lambdaToUpdate, functionRuntime, currentParameters, scheduleParameters);
    const { selectedSettings } = await generalQuestionsWalkthrough_1.settingsUpdateSelection();
    if (selectedSettings.includes(constants_2.resourceAccessSetting)) {
        const additionalParameters = await execPermissionsWalkthrough_1.askExecRolePermissionsQuestions(context, lambdaToUpdate, currentParameters.permissions);
        additionalParameters.dependsOn = additionalParameters.dependsOn || [];
        funcParamsUtils_1.merge(functionParameters, additionalParameters);
        updateCFNFileForResourcePermissions(resourceDirPath, functionParameters, currentParameters);
    }
    if (selectedSettings.includes(constants_2.cronJobSetting)) {
        funcParamsUtils_1.merge(functionParameters, await scheduleWalkthrough_1.scheduleWalkthrough(context, scheduleParameters, true));
    }
    if (selectedSettings.includes(constants_2.lambdaLayerSetting)) {
        const currentFunctionParameters = amplify_cli_core_1.JSONUtilities.readJson(path_1.default.join(resourceDirPath, constants_2.functionParametersFileName), { throwIfNotExist: false }) || {};
        funcParamsUtils_1.merge(functionParameters, await addLayerToFunctionWalkthrough_1.addLayersToFunctionWalkthrough(context, { value: functionRuntime }, currentFunctionParameters.lambdaLayers, true));
        addLayerCFNParameters(context, functionParameters, resourceDirPath);
    }
    if (selectedSettings.includes(constants_2.secretsConfiguration)) {
        funcParamsUtils_1.merge(functionParameters, await secretValuesWalkthrough_1.secretValuesWalkthrough(secretDeltaUtilities_1.secretNamesToSecretDeltas(functionSecretsStateManager_1.getLocalFunctionSecretNames(functionParameters.resourceName)), Object.keys(environmentVariablesHelper_1.getStoredEnvironmentVariables(functionParameters.resourceName)), {
            preConfirmed: true,
        }));
    }
    const projectMeta = amplify_cli_core_1.stateManager.getMeta();
    functionParameters.dependsOn = consolidateDependsOn_1.consolidateDependsOnForLambda(projectMeta, functionParameters.dependsOn, lambdaToUpdate, selectedSettings);
    funcParamsUtils_1.merge(functionParameters, await environmentVariableWalkthrough_1.askEnvironmentVariableQuestions(lambdaToUpdate, undefined, !selectedSettings.includes(constants_2.environmentVariableSetting)));
    functionParameters.topLevelComment = buildTopLevelComment(functionParameters.environmentMap);
    return functionParameters;
}
exports.updateWalkthrough = updateWalkthrough;
function migrate(context, projectPath, resourceName) {
    const resourceDirPath = amplify_cli_core_1.pathManager.getResourceDirectoryPath(projectPath, constants_1.categoryName, resourceName);
    const cfnFilePath = path_1.default.join(resourceDirPath, `${resourceName}-cloudformation-template.json`);
    const oldCfn = amplify_cli_core_1.JSONUtilities.readJson(cfnFilePath);
    const newCfn = {};
    Object.assign(newCfn, oldCfn);
    if (!newCfn.Parameters) {
        newCfn.Parameters = {};
    }
    newCfn.Parameters.env = {
        Type: 'String',
    };
    if (!newCfn.Conditions) {
        newCfn.Conditions = {};
    }
    newCfn.Conditions.ShouldNotCreateEnvResources = {
        'Fn::Equals': [
            {
                Ref: 'env',
            },
            'NONE',
        ],
    };
    const oldFunctionName = newCfn.Resources.LambdaFunction.Properties.FunctionName;
    newCfn.Resources.LambdaFunction.Properties.FunctionName = {
        'Fn::If': [
            'ShouldNotCreateEnvResources',
            oldFunctionName,
            {
                'Fn::Join': [
                    '',
                    [
                        oldFunctionName,
                        '-',
                        {
                            Ref: 'env',
                        },
                    ],
                ],
            },
        ],
    };
    newCfn.Resources.LambdaFunction.Properties.Environment = { Variables: { ENV: { Ref: 'env' } } };
    const oldRoleName = newCfn.Resources.LambdaExecutionRole.Properties.RoleName;
    newCfn.Resources.LambdaExecutionRole.Properties.RoleName = {
        'Fn::If': [
            'ShouldNotCreateEnvResources',
            oldRoleName,
            {
                'Fn::Join': [
                    '',
                    [
                        oldRoleName,
                        '-',
                        {
                            Ref: 'env',
                        },
                    ],
                ],
            },
        ],
    };
    amplify_cli_core_1.JSONUtilities.writeJson(cfnFilePath, newCfn);
}
exports.migrate = migrate;
function updateCFNFileForResourcePermissions(resourceDirPath, functionParameters, currentParameters, apiResourceName) {
    const cfnFileName = `${functionParameters.resourceName}-cloudformation-template.json`;
    const cfnFilePath = path_1.default.join(resourceDirPath, cfnFileName);
    const cfnContent = amplify_cli_core_1.JSONUtilities.readJson(cfnFilePath);
    const dependsOnParams = { env: { Type: 'String' } };
    Object.keys(functionParameters.environmentMap)
        .filter(key => key !== 'ENV')
        .filter(key => key !== 'REGION')
        .filter(resourceProperty => 'Ref' in functionParameters.environmentMap[resourceProperty])
        .forEach(resourceProperty => {
        dependsOnParams[functionParameters.environmentMap[resourceProperty].Ref] = {
            Type: 'String',
            Default: functionParameters.environmentMap[resourceProperty].Ref,
        };
    });
    cfnContent.Parameters = cloudformationHelpers_1.getNewCFNParameters(cfnContent.Parameters, currentParameters, dependsOnParams, functionParameters.mutableParametersState, apiResourceName);
    if (!cfnContent.Resources.AmplifyResourcesPolicy) {
        cfnContent.Resources.AmplifyResourcesPolicy = {
            DependsOn: ['LambdaExecutionRole'],
            Type: 'AWS::IAM::Policy',
            Properties: {
                PolicyName: 'amplify-lambda-execution-policy',
                Roles: [
                    {
                        Ref: 'LambdaExecutionRole',
                    },
                ],
                PolicyDocument: {
                    Version: '2012-10-17',
                    Statement: [],
                },
            },
        };
    }
    if (functionParameters.categoryPolicies.length === 0) {
        delete cfnContent.Resources.AmplifyResourcesPolicy;
    }
    else {
        cfnContent.Resources.AmplifyResourcesPolicy.Properties.PolicyDocument.Statement = functionParameters.categoryPolicies;
    }
    cfnContent.Resources.LambdaFunction.Properties.Environment.Variables = cloudformationHelpers_1.getNewCFNEnvVariables(cfnContent.Resources.LambdaFunction.Properties.Environment.Variables, currentParameters, functionParameters.environmentMap, functionParameters.mutableParametersState, apiResourceName);
    amplify_cli_core_1.JSONUtilities.writeJson(cfnFilePath, cfnContent);
    updateTopLevelComment_1.tryUpdateTopLevelComment(resourceDirPath, lodash_1.default.keys(functionParameters.environmentMap));
}
exports.updateCFNFileForResourcePermissions = updateCFNFileForResourcePermissions;
const addLayerCFNParameters = (context, functionParameters, resourceDirPath) => {
    const cfnFileName = `${functionParameters.resourceName}-cloudformation-template.json`;
    const cfnFilePath = path_1.default.join(resourceDirPath, cfnFileName);
    const cfnContent = amplify_cli_core_1.JSONUtilities.readJson(cfnFilePath);
    functionParameters.lambdaLayers.forEach(layer => {
        const resourceName = lodash_1.default.get(layer, ['resourceName'], null);
        if (resourceName) {
            const param = `function${resourceName}Arn`;
            if (cfnContent.Parameters[param] === undefined) {
                cfnContent.Parameters[param] = {
                    Type: 'String',
                    Default: param,
                };
            }
        }
    });
    cfnContent.Resources.LambdaFunction.Properties.Layers = layerArnConverter_1.convertLambdaLayerMetaToLayerCFNArray(functionParameters.lambdaLayers, context.amplify.getEnvInfo().envName);
    amplify_cli_core_1.JSONUtilities.writeJson(cfnFilePath, cfnContent);
};
//# sourceMappingURL=lambda-walkthrough.js.map