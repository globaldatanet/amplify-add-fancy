"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureEnvironmentVariableValues = exports.askEnvironmentVariableCarryOut = exports.saveEnvironmentVariables = exports.getStoredEnvironmentVariables = exports.validKey = void 0;
const path_1 = __importDefault(require("path"));
const lodash_1 = __importDefault(require("lodash"));
const uuid_1 = __importDefault(require("uuid"));
const inquirer_1 = __importDefault(require("inquirer"));
const amplify_cli_core_1 = require("amplify-cli-core");
const constants_1 = require("./constants");
const constants_2 = require("../../../constants");
exports.validKey = new RegExp(/^[a-zA-Z0-9_]+$/);
const getStoredEnvironmentVariables = (resourceName, currentEnvName) => {
    const storedList = getStoredList(resourceName);
    const storedReferences = getStoredReferences(resourceName);
    const storedParameters = getStoredParameters(resourceName);
    const storedKeyValue = getStoredKeyValue(resourceName, currentEnvName);
    const environmentVariables = {};
    storedList.forEach(({ environmentVariableName, cloudFormationParameterName }) => {
        var _a;
        if (!environmentVariableName)
            return;
        if (!cloudFormationParameterName)
            return;
        if (!storedParameters[cloudFormationParameterName])
            return;
        if (((_a = storedReferences[environmentVariableName]) === null || _a === void 0 ? void 0 : _a.Ref) !== cloudFormationParameterName)
            return;
        if (!lodash_1.default.has(storedKeyValue, cloudFormationParameterName))
            return;
        environmentVariables[environmentVariableName] = storedKeyValue[cloudFormationParameterName];
    });
    return environmentVariables;
};
exports.getStoredEnvironmentVariables = getStoredEnvironmentVariables;
const saveEnvironmentVariables = (context, resourceName, newEnvironmentVariables) => {
    const currentEnvironmentVariables = exports.getStoredEnvironmentVariables(resourceName);
    lodash_1.default.each(currentEnvironmentVariables, (_, key) => {
        deleteEnvironmentVariable(resourceName, key);
    });
    lodash_1.default.each(newEnvironmentVariables, (value, key) => {
        setEnvironmentVariable(context, resourceName, key, value);
    });
};
exports.saveEnvironmentVariables = saveEnvironmentVariables;
const askEnvironmentVariableCarryOut = async (context, currentEnvName, projectPath, yesFlagSet) => {
    var _a, _b;
    const teamProviderInfo = amplify_cli_core_1.stateManager.getTeamProviderInfo(projectPath, {
        throwIfNotExist: false,
        default: {},
    });
    const functions = ((_b = (_a = teamProviderInfo[currentEnvName]) === null || _a === void 0 ? void 0 : _a.categories) === null || _b === void 0 ? void 0 : _b.function) || {};
    const functionNames = Object.keys(functions);
    if (functionNames.length === 0) {
        return;
    }
    const hasEnvVars = !!functionNames.find(funcName => !lodash_1.default.isEmpty(exports.getStoredEnvironmentVariables(funcName, currentEnvName)));
    if (!hasEnvVars) {
        return;
    }
    const envVarQuestion = async () => {
        const envVarQuestion = {
            type: 'list',
            name: 'envVar',
            message: 'You have configured environment variables for functions. How do you want to proceed?',
            choices: [
                {
                    value: 'carry',
                    name: 'Carry over existing environment variables to this new environment',
                },
                {
                    value: 'update',
                    name: 'Update environment variables now',
                },
            ],
        };
        if (context.parameters.options.quickstart)
            return;
        const { envVar } = yesFlagSet ? { envVar: 'carry' } : await inquirer_1.default.prompt(envVarQuestion);
        if (envVar === 'carry')
            return;
        if (envVar === 'update')
            await envVarSelectFunction();
    };
    const envVarSelectFunction = async () => {
        const abortKey = uuid_1.default.v4();
        const functionNameQuestion = {
            type: 'list',
            name: 'functionName',
            message: 'Select the Lambda function you want to update values',
            choices: functionNames
                .map(name => ({
                name,
                value: name,
            }))
                .concat({
                name: "I'm done",
                value: abortKey,
            }),
        };
        const { functionName } = await inquirer_1.default.prompt(functionNameQuestion);
        if (functionName === abortKey)
            return;
        await envVarSelectKey(functionName);
    };
    const envVarSelectKey = async (functionName) => {
        const envVars = exports.getStoredEnvironmentVariables(functionName, currentEnvName);
        const abortKey = uuid_1.default.v4();
        const keyNameQuestion = {
            type: 'list',
            name: 'keyName',
            message: 'Which functionâ€™s environment variables do you want to edit?',
            choices: Object.keys(envVars)
                .map(name => ({
                name,
                value: name,
            }))
                .concat({
                name: "I'm done",
                value: abortKey,
            }),
        };
        const { keyName } = await inquirer_1.default.prompt(keyNameQuestion);
        if (keyName === abortKey) {
            await envVarSelectFunction();
            return;
        }
        await envVarUpdateValue(functionName, keyName);
    };
    const envVarUpdateValue = async (functionName, keyName) => {
        const envVars = exports.getStoredEnvironmentVariables(functionName, currentEnvName);
        const newValueQuestion = {
            type: 'input',
            name: 'newValue',
            message: 'Enter the environment variable value:',
            default: envVars[keyName],
            validate: input => {
                if (input.length >= 2048) {
                    return 'The value must be 2048 characters or less';
                }
                return true;
            },
        };
        const { newValue } = await inquirer_1.default.prompt(newValueQuestion);
        functions[functionName][lodash_1.default.camelCase(keyName)] = newValue;
        await envVarSelectKey(functionName);
    };
    await envVarQuestion();
    Object.keys(functions).forEach(functionName => {
        setStoredKeyValue(functionName, functions[functionName]);
    });
};
exports.askEnvironmentVariableCarryOut = askEnvironmentVariableCarryOut;
const ensureEnvironmentVariableValues = async (context) => {
    var _a, _b, _c, _d, _e, _f, _g;
    const yesFlagSet = ((_b = (_a = context === null || context === void 0 ? void 0 : context.exeInfo) === null || _a === void 0 ? void 0 : _a.inputParams) === null || _b === void 0 ? void 0 : _b.yes) || ((_d = (_c = context === null || context === void 0 ? void 0 : context.input) === null || _c === void 0 ? void 0 : _c.options) === null || _d === void 0 ? void 0 : _d.yes);
    const currentEnvName = (_e = amplify_cli_core_1.stateManager.getLocalEnvInfo()) === null || _e === void 0 ? void 0 : _e.envName;
    const teamProviderInfo = amplify_cli_core_1.stateManager.getTeamProviderInfo(undefined, {
        throwIfNotExist: false,
        default: {},
    });
    const functions = ((_g = (_f = teamProviderInfo[currentEnvName]) === null || _f === void 0 ? void 0 : _f.categories) === null || _g === void 0 ? void 0 : _g.function) || {};
    const functionNames = Object.keys(functions);
    if (functionNames.length === 0) {
        return;
    }
    let printedMessage = false;
    for (const functionName of functionNames) {
        const storedList = getStoredList(functionName);
        const storedKeyValue = getStoredKeyValue(functionName);
        for (const item of storedList) {
            const envName = item.environmentVariableName;
            const keyName = item.cloudFormationParameterName;
            if (storedKeyValue.hasOwnProperty(keyName))
                continue;
            if (!printedMessage) {
                if (yesFlagSet) {
                    const errMessage = `An error occurred pushing an env "${currentEnvName}" due to missing environment variable values`;
                    context.print.error(errMessage);
                    await context.usageData.emitError(new Error(errMessage));
                    amplify_cli_core_1.exitOnNextTick(1);
                }
                else {
                    context.print.info('');
                    context.print.info('Some Lambda function environment variables are defined but missing values.');
                    context.print.info('');
                }
                printedMessage = true;
            }
            const newValueQuestion = {
                type: 'input',
                name: 'newValue',
                message: `Enter the missing environment variable value of ${envName} in ${functionName}:`,
                validate: input => {
                    if (input.length >= 2048) {
                        return 'The value must be 2048 characters or less';
                    }
                    return true;
                },
            };
            const { newValue } = await inquirer_1.default.prompt(newValueQuestion);
            setStoredKeyValue(functionName, {
                ...storedKeyValue,
                [keyName]: newValue,
            });
        }
    }
};
exports.ensureEnvironmentVariableValues = ensureEnvironmentVariableValues;
const setEnvironmentVariable = (context, resourceName, newEnvironmentVariableKey, newEnvironmentVariableValue) => {
    const newList = getStoredList(resourceName);
    const newReferences = getStoredReferences(resourceName);
    const newParameters = getStoredParameters(resourceName);
    const newKeyValue = getStoredKeyValue(resourceName);
    const cameledKey = lodash_1.default.camelCase(newEnvironmentVariableKey);
    newList.push({
        cloudFormationParameterName: cameledKey,
        environmentVariableName: newEnvironmentVariableKey,
    });
    newReferences[newEnvironmentVariableKey] = { Ref: cameledKey };
    newParameters[cameledKey] = { Type: 'String' };
    newKeyValue[cameledKey] = newEnvironmentVariableValue;
    setStoredList(resourceName, newList);
    setStoredReference(resourceName, newReferences);
    setStoredParameters(resourceName, newParameters);
    setStoredKeyValue(resourceName, newKeyValue);
};
const deleteEnvironmentVariable = (resourceName, targetedKey) => {
    let newList = getStoredList(resourceName);
    const newReferences = getStoredReferences(resourceName);
    const newKeyValue = getStoredKeyValue(resourceName);
    const newParameters = getStoredParameters(resourceName);
    const cameledKey = lodash_1.default.camelCase(targetedKey);
    newList = lodash_1.default.filter(newList, item => {
        return item.cloudFormationParameterName !== cameledKey && item.environmentVariableName !== targetedKey;
    });
    lodash_1.default.unset(newReferences, targetedKey);
    lodash_1.default.unset(newParameters, cameledKey);
    lodash_1.default.unset(newKeyValue, cameledKey);
    setStoredList(resourceName, newList);
    setStoredReference(resourceName, newReferences);
    setStoredParameters(resourceName, newParameters);
    setStoredKeyValue(resourceName, newKeyValue);
};
const getStoredList = (resourceName) => {
    const projectBackendDirPath = amplify_cli_core_1.pathManager.getBackendDirPath();
    const resourcePath = path_1.default.join(projectBackendDirPath, constants_2.categoryName, resourceName);
    const functionParameterFilePath = path_1.default.join(resourcePath, constants_1.functionParametersFileName);
    const functionParameters = amplify_cli_core_1.JSONUtilities.readJson(functionParameterFilePath, { throwIfNotExist: false }) || {};
    return lodash_1.default.get(functionParameters, 'environmentVariableList', []);
};
const setStoredList = (resourceName, newList) => {
    const projectBackendDirPath = amplify_cli_core_1.pathManager.getBackendDirPath();
    const resourcePath = path_1.default.join(projectBackendDirPath, constants_2.categoryName, resourceName);
    const functionParameterFilePath = path_1.default.join(resourcePath, constants_1.functionParametersFileName);
    const functionParameters = amplify_cli_core_1.JSONUtilities.readJson(functionParameterFilePath, { throwIfNotExist: false }) || {};
    lodash_1.default.set(functionParameters, 'environmentVariableList', newList);
    amplify_cli_core_1.JSONUtilities.writeJson(functionParameterFilePath, functionParameters);
};
const getStoredReferences = (resourceName) => {
    const projectBackendDirPath = amplify_cli_core_1.pathManager.getBackendDirPath();
    const resourcePath = path_1.default.join(projectBackendDirPath, constants_2.categoryName, resourceName);
    const cfnFileName = `${resourceName}-cloudformation-template.json`;
    const cfnFilePath = path_1.default.join(resourcePath, cfnFileName);
    const cfnContent = amplify_cli_core_1.JSONUtilities.readJson(cfnFilePath, { throwIfNotExist: false }) || {};
    return lodash_1.default.get(cfnContent, ['Resources', 'LambdaFunction', 'Properties', 'Environment', 'Variables'], {});
};
const setStoredReference = (resourceName, newReferences) => {
    const projectBackendDirPath = amplify_cli_core_1.pathManager.getBackendDirPath();
    const resourcePath = path_1.default.join(projectBackendDirPath, constants_2.categoryName, resourceName);
    const cfnFileName = `${resourceName}-cloudformation-template.json`;
    const cfnFilePath = path_1.default.join(resourcePath, cfnFileName);
    const cfnContent = amplify_cli_core_1.JSONUtilities.readJson(cfnFilePath, { throwIfNotExist: false }) || {};
    lodash_1.default.set(cfnContent, ['Resources', 'LambdaFunction', 'Properties', 'Environment', 'Variables'], newReferences);
    amplify_cli_core_1.JSONUtilities.writeJson(cfnFilePath, cfnContent);
};
const getStoredParameters = (resourceName) => {
    const projectBackendDirPath = amplify_cli_core_1.pathManager.getBackendDirPath();
    const resourcePath = path_1.default.join(projectBackendDirPath, constants_2.categoryName, resourceName);
    const cfnFileName = `${resourceName}-cloudformation-template.json`;
    const cfnFilePath = path_1.default.join(resourcePath, cfnFileName);
    const cfnContent = amplify_cli_core_1.JSONUtilities.readJson(cfnFilePath, { throwIfNotExist: false }) || {};
    return lodash_1.default.get(cfnContent, ['Parameters'], {});
};
const setStoredParameters = (resourceName, newParameters) => {
    const projectBackendDirPath = amplify_cli_core_1.pathManager.getBackendDirPath();
    const resourcePath = path_1.default.join(projectBackendDirPath, constants_2.categoryName, resourceName);
    const cfnFileName = `${resourceName}-cloudformation-template.json`;
    const cfnFilePath = path_1.default.join(resourcePath, cfnFileName);
    const cfnContent = amplify_cli_core_1.JSONUtilities.readJson(cfnFilePath, { throwIfNotExist: false }) || {};
    lodash_1.default.set(cfnContent, ['Parameters'], newParameters);
    amplify_cli_core_1.JSONUtilities.writeJson(cfnFilePath, cfnContent);
};
const getStoredKeyValue = (resourceName, currentEnvName) => {
    const projectPath = amplify_cli_core_1.pathManager.findProjectRoot();
    const envName = currentEnvName || amplify_cli_core_1.stateManager.getLocalEnvInfo().envName;
    const teamProviderInfo = amplify_cli_core_1.stateManager.getTeamProviderInfo(projectPath, { throwIfNotExist: false });
    return lodash_1.default.get(teamProviderInfo, [envName, 'categories', constants_2.categoryName, resourceName], {});
};
const setStoredKeyValue = (resourceName, newKeyValue) => {
    const projectPath = amplify_cli_core_1.pathManager.findProjectRoot();
    const envName = amplify_cli_core_1.stateManager.getLocalEnvInfo().envName;
    const teamProviderInfo = amplify_cli_core_1.stateManager.getTeamProviderInfo(projectPath, { throwIfNotExist: false });
    lodash_1.default.set(teamProviderInfo, [envName, 'categories', constants_2.categoryName, resourceName], newKeyValue);
    amplify_cli_core_1.stateManager.setTeamProviderInfo(projectPath, teamProviderInfo);
};
//# sourceMappingURL=environmentVariablesHelper.js.map